MongoDB Schema & Relationships Exercise Set

Section 1: Working with Schemas & Data Types

1. Create a database named trainingdb
test> use trainingdb
switched to db trainingdb


2. Create a collection employees with the specified schema
3. Insert 4 employees
trainingdb> db.employees.insertMany([
...   {
...     name: "Alice",
...     age: 30,
...     isManager: true,
...     skills: ["JavaScript", "MongoDB", "React"],
...     joiningDate: new Date("2022-04-10"),
...     profile: { linkedin: "https://linkedin.com/in/alice", portfolio: "https://alice.dev" }
...   },
...   {
...     name: "Bob",
...     age: 25,
...     isManager: false,
...     skills: ["Python", "Django"],
...     joiningDate: new Date("2023-03-15"),
...     profile: { linkedin: "https://linkedin.com/in/bob", portfolio: "https://bob.dev" }
...   },
...   {
...     name: "Carol",
...     age: 28,
...     isManager: true,
...     skills: ["Java", "Spring", "SQL", "AWS"],
...     joiningDate: new Date("2021-12-01"),
...     profile: { linkedin: "https://linkedin.com/in/carol", portfolio: "https://carol.dev" }
...   },
...   {
...     name: "David",
...     age: 35,
...     isManager: false,
...     skills: ["HTML", "CSS", "JavaScript"],
...     joiningDate: new Date("2023-07-01"),
...     profile: { linkedin: "https://linkedin.com/in/david", portfolio: "https://david.dev" }
...   }
... ])
...
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6830460a34c23d07b06c4bd0'),
    '1': ObjectId('6830460a34c23d07b06c4bd1'),
    '2': ObjectId('6830460a34c23d07b06c4bd2'),
    '3': ObjectId('6830460a34c23d07b06c4bd3')
  }
}

4. Query: Employees with >2 skills & joined after a specific date
trainingdb> db.employees.find({
...   $and: [
...     { $expr: { $gt: [ { $size: "$skills" }, 2 ] } },
...     { joiningDate: { $gt: new Date("2022-01-01") } }
...   ]
... })

5. Add rating field to one employee
trainingdb> db.employees.updateOne(
...   { name: "Alice" },
...   { $set: { rating: 4.5 } }
... )
...
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

6. Find all employees with rating field of type double
trainingdb> db.employees.find({
...   rating: { $type: "double" }
... })

7. Exclude _id, show only name and skills
//using projection
trainingdb> db.employees.find(
...   {},
...   { _id: 0, name: 1, skills: 1 }
... )



Section 2: One-to-One (Embedded)

1. Create a database schooldb
trainingdb> use schooldb
switched to db schooldb

2. Insert 3 students with embedded guardian
schooldb> db.students.insertMany([
...   { name: "John", age: 14, guardian: { name: "Mary", phone: "1234567890", relation: "Mother" } },
...   { name: "Jane", age: 13, guardian: { name: "Paul", phone: "2345678901", relation: "Father" } },
...   { name: "Sam", age: 15, guardian: { name: "Lisa", phone: "3456789012", relation: "Mother" } }
... ])

3. Query students whose guardian is "Mother"
schooldb> db.students.find({
...   "guardian.relation": "Mother"
... })

4. Update guardian phone for a specific student
schooldb> db.students.updateOne(
...   { name: "John" },
...   { $set: { "guardian.phone": "9999999999" } }
... )


Section 3: One-to-Many (Embedded)

1. Create teachers collection in schooldb
schooldb> db.teachers.insertMany([
...   { name: "Mr. Smith", classes: ["Math", "Physics"] },
...   { name: "Ms. Rose", classes: ["Chemistry", "Biology"] },
...   { name: "Mr. Lee", classes: ["Computer Science", "Math"] }
... ])

2. Query teachers who teach "Physics"
schooldb> db.teachers.find({ classes: "Physics" })

3. Add "Robotics" to a teacher
schooldb> db.teachers.updateOne(
...   { name: "Mr. Smith" },
...   { $addToSet: { classes: "Robotics" } }
... )

4. Remove "Math" from a teacher's classes
schooldb> db.teachers.updateOne(
...   { name: "Mr. Lee" },
...   { $pull: { classes: "Math" } }
... )

Section 4: One-to-Many (Referenced)

1. Create academia database
schooldb> use academia
switched to db academia

2. Insert documents into courses
academia> db.courses.insertMany([
...   { _id: ObjectId("651d1b9a28a5faec1ae10001"), title: "Machine Learning", credits: 4 },
...   { _id: ObjectId("651d1b9a28a5faec1ae10002"), title: "Data Structures", credits: 3 }
... ])

3. Insert students with enrolledCourse reference
academia> db.students.insertMany([
...   { name: "Eve", enrolledCourse: ObjectId("651d1b9a28a5faec1ae10001") },
...   { name: "Tom", enrolledCourse: ObjectId("651d1b9a28a5faec1ae10002") }
... ])

4. Query students by course ObjectId
academia> db.students.find({ enrolledCourse: ObjectId("651d1b9a28a5faec1ae10001") })

5. Query course details by _id
academia> db.courses.find({ _id: ObjectId("651d1b9a28a5faec1ae10001") })

Section 5: $lookup (Join in Aggregation)

1. Use $lookup to join students with courses
academia> db.students.aggregate([
...   {
...     $lookup: {
...       from: "courses",
...       localField: "enrolledCourse",
...       foreignField: "_id",
...       as: "courseDetails"
...     }
...   }
... ])

2. Show only student name and course title
academia> db.students.aggregate([
...   {
...     $lookup: {
...       from: "courses",
...       localField: "enrolledCourse",
...       foreignField: "_id",
...       as: "courseDetails"
...     }
...   },
...   {
...     $project: {
...       name: 1,
...       courseTitle: { $arrayElemAt: ["$courseDetails.title", 0] },
...       _id: 0
...     }
...   }
... ])

3. Add $match after $lookup for "Machine Learning"
academia> db.students.aggregate([
...   {
...     $lookup: {
...       from: "courses",
...       localField: "enrolledCourse",
...       foreignField: "_id",
...       as: "courseDetails"
...     }
...   },
...   {
...     $match: {
...       "courseDetails.title": "Machine Learning"
...     }
...   },
...   {
...     $project: {
...       name: 1,
...       courseTitle: { $arrayElemAt: ["$courseDetails.title", 0] },
...       _id: 0
...     }
...   }
... ])
